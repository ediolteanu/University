Nume: Olteanu Eduard-Florin
Grupa 324CD

League-of-POO - etapa 1

De-a lungul rezolvarii aceste teme am folosit git, in arhiva fiind folderul
.git.

In clasa Constants am definit toate valorile legate de campioni.
In clasa GameInput am creat functia readFromFile care face citirea din fisiere
utilizand API-ul pus la dispozitie.

TerrainType este o enumerare a celor 4 tipuri de teren.
Clasa Map are rol transpunerea din matrice de char-uri in tipurile de teren,
metoda getTerrainType returnand un element de tip TerrainType in functie de
valoarea de char-ul respectiv.

Clasele Map si Game sunt Singleton.

In clasa Game sunt implementate metodele care ajuta efectiv la rularea jocului.
In metoda playGame este un for pentru runde. La inceputul fiecarei runde, se
verifica abilitatile overtime ramase. Apoi cu ajutorul celor doua for-uri se
cauta doi jucatori care se afla pe aceeasi pozitie, sunt vii si nu s-au luptat
deja. Daca se gasesc, acestia se lupta - fight1v1() -  si in metoda 
fightAftermath() se verifica daca cineva a castigat lupta si se adauga xp; de 
asemenea daca face lvl-up se reinitializaeza hp-ul.
In metoda fight1v1 se calculeaza mai intai dmg1 si dmg2 care reprezinta
damage-urile pe care cei doi eroi le dau inainte de race modifiers, pentru a se
da ca paramentru la metodele accept, in eventualitatea in care unul dintre ei 
este wizard sa aiba damage la care sa dea deflect. Apoi se seteaza faptul ca
cei doi eroi s-au batut pentru a nu fi luati in considerare in continuare la
parcurgere
In metoda endGame se face scrierea in fisier.

Clasa Hero este o clasa abstracta care defineste parametrii si metodele de baza
ale fiecarui tip de caracter.
Metode comune tuturor sunt implementate aici, updateLevel, resetDebuffs, 
updatePosition. De asemenea sunt declarate si metodele abstracte updateTotalHP(),
calculateDamageBeforeModifiers(), accept() si cele 4 fight() care trebuie 
implementate de fiecare clasa mostenitoare.
Metoda updateTotalHP() seteaza HP-ul total al unui erou in functie de nivel si de
paramentrii specifici si updateaza si HP-ul curent la HP-ul total actualizat,
deoarece aceasta metoda este apelata doar atunci cand un erou face level-up.
Metodele accept() si 4xfight() reprezinta mecanismul de double dispatch.
Fiecare clasa are o metoda accept(hero..) in care apeleaza hero.fight(this..).
In functie de tipul hero si this se va apela metoda fight din clasa
corespunzatoare asupra eroului corespunzator, creaindu-se astfel mecanismul de
double-dispatch.

Apoi in fiecare clasa mostenitor avem implementarile celor 4 metode fight pentru
fiecare tip de erou. In fiecare metoda fight se da damage-ul corespunzator
abilitatilor si se seteaza erou mort daca are HP <= 0. De asemenea se
implementeaza si metoda calculateDamageBeforeModifiers. Cu precizarea ca in clasa
Wizard, aceasta ultima metoda returneaza 0 deoarece ea este folosita doar cand se
lupta un wizard pentru abilitatea deflect, in cazul in care se lupta 2 wizard,
abilitatea deflect nu se aplica. De asemenea acest lucru este observat in metoda
fight(wizard...) unde nu este apelata deflect().

Fiecare abilitate a fost implementata conform cerintei, in afara de calcularea
damage-ului basic, in functie de paramterii abilitatii si de race si land 
modifiers, pentru abilitatile care aplica efecte overtime se apeleaza si
resetDebuffs care reseteaza toti parametrii overtime ai unui erou si se seteaza
noii parametrii in functie de abilitate. De ex: ignite(hero..) aplica damage
in runda curenta si apoi seteaza remainingIgniteRounds = 2 si igniteDamage in 
functie de valoarea calculata.

De asemenea, pentru fiecare clasa de erou este suprascrisa si metoda toString,
pentru a afisa rezultatul conform cerintei.

In clasa Main, in main este facuta mai intai citirea si apoi sunt instantiate
un obiect de tip Map si unul de tip Game. Apoi sunt apelate game.playGame pentru
a rula jocul si game.endGame(args[1]) pentru a face scrierea in fisierul output
dat ca parametru la args[1].

